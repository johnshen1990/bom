<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-3.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd" default-autowire="byName">	
	
	<bean id="coreDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="url" value="#{bomProps['xs.bom.core.url']}" />
		<property name="username" value="#{bomProps['xs.bom.core.username']}" />
		<property name="password" value="#{bomProps['xs.bom.core.password']}" />

		<property name="filters" value="#{bomProps['xs.bom.filters']}" />
		<property name="maxActive" value="#{bomProps['xs.bom.maxActive']}" />
		<property name="initialSize" value="#{bomProps['xs.bom.initialSize']}" />
		<property name="maxWait" value="#{bomProps['xs.bom.maxWait']}" />
		<property name="minIdle" value="#{bomProps['xs.bom.minIdle']}" />
		<property name="timeBetweenEvictionRunsMillis"
			value="#{bomProps['xs.bom.timeBetweenEvictionRunsMillis']}" />
		<property name="minEvictableIdleTimeMillis"
			value="#{bomProps['xs.bom.minEvictableIdleTimeMillis']}" />
		<property name="validationQuery"
			value="#{bomProps['xs.bom.validationQuery']}" />
		<property name="testWhileIdle" value="#{bomProps['xs.bom.testWhileIdle']}" />
		<property name="testOnBorrow" value="#{bomProps['xs.bom.testOnBorrow']}" />
		<property name="testOnReturn" value="#{bomProps['xs.bom.testOnReturn']}" />
		<property name="maxOpenPreparedStatements"
			value="#{bomProps['xs.bom.maxOpenPreparedStatements']}" />
		<property name="removeAbandoned"
			value="#{bomProps['xs.bom.removeAbandoned']}" />
		<property name="removeAbandonedTimeout"
			value="#{bomProps['xs.bom.removeAbandonedTimeout']}" />
		<property name="logAbandoned" value="#{bomProps['xs.bom.logAbandoned']}" />
        <property name="poolPreparedStatements" value="#{bomProps['xs.bom.poolPreparedStatements']}" />
	</bean>

    <bean id="queryDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="url" value="#{bomProps['xs.bom.query.url']}" />
        <property name="username" value="#{bomProps['xs.bom.query.username']}" />
        <property name="password" value="#{bomProps['xs.bom.query.password']}" />

        <property name="filters" value="#{bomProps['xs.bom.filters']}" />
        <property name="maxActive" value="#{bomProps['xs.bom.maxActive']}" />
        <property name="initialSize" value="#{bomProps['xs.bom.initialSize']}" />
        <property name="maxWait" value="#{bomProps['xs.bom.maxWait']}" />
        <property name="minIdle" value="#{bomProps['xs.bom.minIdle']}" />
        <property name="timeBetweenEvictionRunsMillis"
                  value="#{bomProps['xs.bom.timeBetweenEvictionRunsMillis']}" />
        <property name="minEvictableIdleTimeMillis"
                  value="#{bomProps['xs.bom.minEvictableIdleTimeMillis']}" />
        <property name="validationQuery"
                  value="#{bomProps['xs.bom.validationQuery']}" />
        <property name="testWhileIdle" value="#{bomProps['xs.bom.testWhileIdle']}" />
        <property name="testOnBorrow" value="#{bomProps['xs.bom.testOnBorrow']}" />
        <property name="testOnReturn" value="#{bomProps['xs.bom.testOnReturn']}" />
        <property name="maxOpenPreparedStatements"
                  value="#{bomProps['xs.bom.maxOpenPreparedStatements']}" />
        <property name="removeAbandoned"
                  value="#{bomProps['xs.bom.removeAbandoned']}" />
        <property name="removeAbandonedTimeout"
                  value="#{bomProps['xs.bom.removeAbandonedTimeout']}" />
        <property name="logAbandoned" value="#{bomProps['xs.bom.logAbandoned']}" />
        <property name="poolPreparedStatements" value="#{bomProps['xs.bom.poolPreparedStatements']}" />
    </bean>
    <!-- 查询库sessionFactory -->
    <bean id="querySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="queryDataSource" />
        <property name="mapperLocations" value="classpath*:com/xishi/bom/mapper/query/**/*.xml" />
        <!-- 分页插件 -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <!-- 核心库sessionFactory -->
    <bean id="coreSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="coreDataSource" />
        <property name="mapperLocations" value="classpath*:com/xishi/bom/mapper/core/**/*.xml" />
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.xishi.bom.dao.core" />
        <property name="sqlSessionFactoryBeanName" value="coreSqlSessionFactory" />
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.xishi.bom.dao.query" />
        <property name="sqlSessionFactoryBeanName" value="querySqlSessionFactory" />
    </bean>

    <!-- 事务管理器 -->
	<bean id="transactionManagerCore" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="coreDataSource" />
	</bean>
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* *com.xishi.bom.service..*(..))" advice-ref="txAdviceCore" />
	</aop:config>
	<tx:advice id="txAdviceCore" transaction-manager="transactionManagerCore">
		<tx:attributes>
			<tx:method name="select*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
</beans>
